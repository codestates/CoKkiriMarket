정상 실행
정상 실행
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    _previousDataValues: {
      id: 83,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '222',
      contents: '<p>2222</p>\n',
      createdAt: 2022-01-05T19:07:16.000Z,
      updatedAt: 2022-01-05T19:07:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    _previousDataValues: {
      id: 82,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '',
      contents: '<p>11어웨잇이필요해</p>\n',
      createdAt: 2022-01-05T18:42:41.000Z,
      updatedAt: 2022-01-05T18:42:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    _previousDataValues: {
      id: 81,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '22',
      contents: '',
      createdAt: 2022-01-05T18:42:24.000Z,
      updatedAt: 2022-01-05T18:42:24.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
바디는 { data: '<p>123</p>\n', title: '33', category: '카테고리/잡담' }
데이터는 : <p>123</p>

Executing (default): INSERT INTO `Contents` (`id`,`user_name`,`category`,`title`,`contents`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Content {
  dataValues: {
    id: 86,
    user_name: 'dahyeon',
    contents: '<p>123</p>\n',
    title: '33',
    category: '카테고리/잡담',
    updatedAt: 2022-01-11T09:11:36.346Z,
    createdAt: 2022-01-11T09:11:36.346Z
  },
  _previousDataValues: {
    user_name: 'dahyeon',
    contents: '<p>123</p>\n',
    title: '33',
    category: '카테고리/잡담',
    id: 86,
    user_id: undefined,
    createdAt: 2022-01-11T09:11:36.346Z,
    updatedAt: 2022-01-11T09:11:36.346Z
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false
}
Executing (default): SELECT `id`, `user_id`, `user_name`, `category`, `title`, `contents`, `createdAt`, `updatedAt` FROM `Contents` AS `Content` ORDER BY `Content`.`createdAt` DESC LIMIT 5;
[
  Content {
    dataValues: {
      id: 88,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '방문 발자취',
      contents: '<p>2022년 1월 11일 오후 6시 19분 골짝이 방문!</p>\n',
      createdAt: 2022-01-11T09:19:16.000Z,
      updatedAt: 2022-01-11T09:19:16.000Z
    },
    _previousDataValues: {
      id: 88,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '방문 발자취',
      contents: '<p>2022년 1월 11일 오후 6시 19분 골짝이 방문!</p>\n',
      createdAt: 2022-01-11T09:19:16.000Z,
      updatedAt: 2022-01-11T09:19:16.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    _previousDataValues: {
      id: 85,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: 'React 에서 하위 컴포넌트의 상태 참조하기',
      contents: "<p>리액트에서 간혹 하위 컴포넌트의 상태나 함수를 참조하고 싶을 때가 있다.</p>\r <p></p>\r <p>블로그 제작 프로젝트 도중에 Draft.js 로 게시판을 구현했는데 우분투 환경에서 성능 관련 문제가 있다는 피드백을 받았다.</p>\r <p></p>\r <p>onChange = (editorState) =&gt; {</p>\r <p>this.setState({ editorState })</p>\r <p>//this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>//this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>//성능향상을 위해 onChange 안에서 convertToRaw 제외</p>\r <p>}</p>\r <p></p>\r <p>기존의 코드에서, 에디터의 상태가 변경될 때마다 에디터의 내용을 추출하고 html형식으로 바꿔서 상위 컴포넌트의 상태에 업데이트하고 있었던 부분을 발견했고</p>\r <p></p>\r <p>이 부분을 글쓰기 전송 버튼을 누를 때만 실행되도록 변경하고 싶었다.</p>\r <p></p>\r <p>하지만 editorState가 에디터 컴포넌트에 존재했기 때문에 상위 컴포넌트인 글쓰기 컴포넌트에서 전송버튼을 누를때만 convetToRaw 함수와 createHtml함수를 호출하기에 무리가 있었다.</p>\r <p></p>\r <p>이 부분에 대해서 구글링을 한 결과 리액트의 ref를 하위 컴포넌트에 전달하면 선언한ref명.current 를 통해서 하위 컴포넌트의 함수나 상태를 참조할 수 있다는 것을 배웠다..</p>\r <p></p>\r <p>따라서</p>\r <p></p>\r <p>개선 점은 다음과 같다.&nbsp;</p>\r <p></p>\r <p>1. 하위 컴포넌트에서 에디터의 내용을 변환하는 부분을 분리한다</p>\r <p>saveData = async () =&gt; {</p>\r <p>await this.setState({ convertedContent: convertToRaw(this.state.editorState.getCurrentContent()) });</p>\r <p>await this.props.createhtml(this.state.convertedContent)</p>\r <p>//console.log(this.state.convertedContent)</p>\r <p>}</p>\r <p></p>\r <p>2. 상위 컴포넌트에서 전송 버튼의 onClick핸들러 함수 안에서 참조를 이용해 saveData 함수를 호출한다.</p>\r <p>refEditor = React.createRef(); //참조 생성</p>\r <p></p>\r <p>&lt;Draft createhtml={this.createhtml} ref={this.refEditor}&gt; //하위 컴포넌트에 ref 붙이기</p>\r <p></p>\r <p>submitHandler = async () =&gt; {</p>\r <p>await this.refEditor.current.saveData();</p>\r <p>postdata('articles/post', {</p>\r <p>data: this.state.html,</p>\r <p>title: this.state.title,</p>\r <p>category: '카테고리/잡담',</p>\r <p>})</p>\r <p>}</p>\r <p></p>\r <p>핸들러 함수 부분</p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p></p>\r <p>ㄷ</p>\r ",
      createdAt: 2022-01-05T20:03:38.000Z,
      updatedAt: 2022-01-05T20:03:38.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    _previousDataValues: {
      id: 84,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '지금은 네시 31분',
      contents: '<p>4시 41분</p>\n',
      createdAt: 2022-01-05T19:31:42.000Z,
      updatedAt: 2022-01-05T19:31:42.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 77,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '또 엄청난 장문테스트',
      contents: `<p>(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정`... 18305 more characters,
      createdAt: 2022-01-05T18:36:41.000Z,
      updatedAt: 2022-01-05T18:36:41.000Z
    },
    _previousDataValues: {
      id: 77,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '또 엄청난 장문테스트',
      contents: `<p>(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세��다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정이 공지되기도 했다. 특히 당에서 붙인 의총 부제는 '변화와 단결'이었다.<br><br>실제로 이 대표는 이날 오후 출연한 OBS '뉴스코멘터리 막전막후' 방송에서도 권 의원에 대해 "우리 당에서 몇 안 되는 선거 유경험자로 기획력이 있다. 2012년 대선에서 저와 같이 일해본 경험이 있어서 그 기획력을 인정한다"고 추켜세웠다.<br><br>이 대표는 이날 오전 윤 후보의 기자회견 직후엔 선대위 개편 방향과 관련해서도 "큰 틀에서 봤을 때 제가 주장했던 것과 닿아 있는 부분이 있다. 상당한 기대를 갖고 지켜보고 있다"며 긍정적인 평가를 내놨다.(서울=연합뉴스) 이슬기 기자 = 국민의힘 윤석열 대선 후보가 5일 단기필마를 선언하며 선대위 해체라는 초강수를 둔 가운데 이준석 대표와의 관계엔 여전히 냉기가 돌고 있다.<br><br>김종인 전 총괄선대위원장과 결별한 윤 후보가 이 대표와의 불협화음을 수습하지 못하면서 완전한 '원팀' 대선 레이스도 멀어진 것 아니냐는 얘기가 나온다.<br><br>앞서 이날 한 때는 윤 후보와 이 대표간 관계 개선에 물꼬가 트이는 것 아니냐는 관측도 나왔다.<br><br>이 대표가 윤 후보의 선대위 개편 방향에 대해 긍정적인 입장을 표하고, 윤 후보 측은 이 대표와 신뢰 관계가 두터운 권영세 의원을 선거대책본부장 겸 신임 사무총장으로 내정한 것이 이런 관측에 힘을 실었다.<br><br>오후 늦은 시각에는 오는 6일 윤 후보와 이 대표가 나란히 의원총회에 참석하는 것으로 일정`... 18305 more characters,
      createdAt: 2022-01-05T18:36:41.000Z,
      updatedAt: 2022-01-05T18:36:41.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  },
  Content {
    dataValues: {
      id: 70,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '33333',
      contents: '<p>324444444444444444111111111111111</p>\n',
      createdAt: 2022-01-05T18:34:15.000Z,
      updatedAt: 2022-01-05T18:34:15.000Z
    },
    _previousDataValues: {
      id: 70,
      user_id: null,
      user_name: 'dahyeon',
      category: '카테고리/잡담',
      title: '33333',
      contents: '<p>324444444444444444111111111111111</p>\n',
      createdAt: 2022-01-05T18:34:15.000Z,
      updatedAt: 2022-01-05T18:34:15.000Z
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      raw: true,
      attributes: [Array]
    },
    isNewRecord: false
  }
]
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
[Error: ENOENT: no such file or directory, access '/root/cokkiri/server/routes../public/public/api.png'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'access',
  path: '/root/cokkiri/server/routes../public/public/api.png'
}
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
파일 전송 /root/cokkiri/server/routes/public/api.png
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
파일 전송 /root/cokkiri/server/routes/public/api.png
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
바디는 {
  user_id: 'dahyeon',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (2eed008a-c6ae-4bd0-a868-db20c655fd76): START TRANSACTION;
Executing (2eed008a-c6ae-4bd0-a868-db20c655fd76): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon' LIMIT 1;
Executing (2eed008a-c6ae-4bd0-a868-db20c655fd76): COMMIT;
false
바디는 {
  user_id: 'dahyeon2',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (c9ef5433-b2a0-42b3-b08a-f115ffad76d8): START TRANSACTION;
Executing (c9ef5433-b2a0-42b3-b08a-f115ffad76d8): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon2' LIMIT 1;
Executing (c9ef5433-b2a0-42b3-b08a-f115ffad76d8): COMMIT;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
바디는 {
  user_id: 'dahyeon2',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (557e5cb2-80d6-4fdd-96a9-e9a9f98ae303): START TRANSACTION;
Executing (557e5cb2-80d6-4fdd-96a9-e9a9f98ae303): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon2' LIMIT 1;
Executing (557e5cb2-80d6-4fdd-96a9-e9a9f98ae303): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (557e5cb2-80d6-4fdd-96a9-e9a9f98ae303): COMMIT;
true
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (c2d4a67e-2d29-4fe3-9d5b-cce826674b44): START TRANSACTION;
Executing (c2d4a67e-2d29-4fe3-9d5b-cce826674b44): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (c2d4a67e-2d29-4fe3-9d5b-cce826674b44): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (c2d4a67e-2d29-4fe3-9d5b-cce826674b44): COMMIT;
true
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (7865b180-b17e-42c3-87f5-903bb71322be): START TRANSACTION;
Executing (7865b180-b17e-42c3-87f5-903bb71322be): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (7865b180-b17e-42c3-87f5-903bb71322be): COMMIT;
false
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
바디는 {
  user_id: 'string, ID',
  email: 'string, 이메일',
  password: 'string, 암호화된 비밀번호',
  phone: 'string, 연락처'
}
Executing (433bbca9-5f66-4b93-ad3a-0402525ad6eb): START TRANSACTION;
Executing (433bbca9-5f66-4b93-ad3a-0402525ad6eb): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'string, ID' LIMIT 1;
Executing (433bbca9-5f66-4b93-ad3a-0402525ad6eb): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (433bbca9-5f66-4b93-ad3a-0402525ad6eb): COMMIT;
true
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (17672762-0c44-495b-a6ac-d8c93fba3cc3): START TRANSACTION;
Executing (17672762-0c44-495b-a6ac-d8c93fba3cc3): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (17672762-0c44-495b-a6ac-d8c93fba3cc3): COMMIT;
false
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (1efd32c7-9961-47ee-a448-0c199839f16b): START TRANSACTION;
Executing (1efd32c7-9961-47ee-a448-0c199839f16b): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (1efd32c7-9961-47ee-a448-0c199839f16b): COMMIT;
false
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (fa43362d-892d-4512-b531-4900b6bd7c1b): START TRANSACTION;
Executing (fa43362d-892d-4512-b531-4900b6bd7c1b): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (fa43362d-892d-4512-b531-4900b6bd7c1b): COMMIT;
false
바디는 {
  user_id: 'string, ID',
  email: 'string, 이메일',
  password: 'string, 암호화된 비밀번호',
  phone: 'string, 연락처'
}
Executing (ef51c3e2-8bfa-4b0f-b712-05ddf27c9cdc): START TRANSACTION;
Executing (ef51c3e2-8bfa-4b0f-b712-05ddf27c9cdc): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'string, ID' LIMIT 1;
Executing (ef51c3e2-8bfa-4b0f-b712-05ddf27c9cdc): COMMIT;
false
바디는 {
  user_id: 'testid555',
  email: 'string, 이메일',
  password: 'string, 암호화된 비밀번호',
  phone: 'string, 연락처'
}
Executing (94766984-f10d-4093-a17b-9de73ad3c596): START TRANSACTION;
Executing (94766984-f10d-4093-a17b-9de73ad3c596): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'testid555' LIMIT 1;
Executing (94766984-f10d-4093-a17b-9de73ad3c596): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (94766984-f10d-4093-a17b-9de73ad3c596): COMMIT;
true
바디는 { nickname: '', password: '', email: '' }
바디는 { nickname: '123123', password: '41243', email: '123123' }
바디는 { nickname: '123123', password: '12124124', email: '123123' }
바디는 { nickname: 'asdfa', password: 'dsfadf', email: 'asdfaf' }
바디는 { user_id: 'eqwe', password: 'wqeqwe', email: 'qweeee' }
Executing (ac72cc10-2a5a-42cb-86a5-967e3de0de2b): START TRANSACTION;
Executing (ac72cc10-2a5a-42cb-86a5-967e3de0de2b): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'eqwe' LIMIT 1;
Executing (ac72cc10-2a5a-42cb-86a5-967e3de0de2b): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (ac72cc10-2a5a-42cb-86a5-967e3de0de2b): COMMIT;
true
바디는 {
  user_id: 'githubtest',
  password: 'testtest',
  email: 'test@testtest.test'
}
Executing (3e9f4de7-597c-4af1-99a9-f1daa2e4c0e8): START TRANSACTION;
Executing (3e9f4de7-597c-4af1-99a9-f1daa2e4c0e8): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'githubtest' LIMIT 1;
Executing (3e9f4de7-597c-4af1-99a9-f1daa2e4c0e8): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (3e9f4de7-597c-4af1-99a9-f1daa2e4c0e8): COMMIT;
true
바디는 {
  userinfo: { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
}
바디는 {
  userinfo: { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
}
바디는 {
  userinfo: { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
}
바디는 {
  userinfo: { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
}
바디는 {
  userinfo: { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
}
바디는 {
  user_id: 'string, ID',
  email: 'string, 이메일',
  password: 'string, 암호화된 비밀번호',
  phone: 'string, 연락처'
}
Executing (94dc7a42-cd7e-4468-985f-72a5b18cb88d): START TRANSACTION;
Executing (94dc7a42-cd7e-4468-985f-72a5b18cb88d): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'string, ID' LIMIT 1;
Executing (94dc7a42-cd7e-4468-985f-72a5b18cb88d): COMMIT;
false
바디는 { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
Executing (96d64fd7-dd4f-4050-8416-d1ffdeb018da): START TRANSACTION;
Executing (96d64fd7-dd4f-4050-8416-d1ffdeb018da): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'd' LIMIT 1;
Executing (96d64fd7-dd4f-4050-8416-d1ffdeb018da): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (96d64fd7-dd4f-4050-8416-d1ffdeb018da): COMMIT;
true
바디는 { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
Executing (30a8aae0-5ba8-479c-89a2-b73c0c6bf15c): START TRANSACTION;
Executing (30a8aae0-5ba8-479c-89a2-b73c0c6bf15c): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'd' LIMIT 1;
Executing (30a8aae0-5ba8-479c-89a2-b73c0c6bf15c): COMMIT;
false
바디는 { user_id: 'd', password: 'd', email: 'd', passwordretype: 'd' }
Executing (d686cee2-b32f-40eb-af36-73530987d5e8): START TRANSACTION;
Executing (d686cee2-b32f-40eb-af36-73530987d5e8): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'd' LIMIT 1;
Executing (d686cee2-b32f-40eb-af36-73530987d5e8): COMMIT;
false
바디는 { user_id: 'dddd', password: 'd', email: 'd', passwordretype: 'd' }
Executing (caf7911b-5252-4e30-8801-5832f4e9c8e0): START TRANSACTION;
Executing (caf7911b-5252-4e30-8801-5832f4e9c8e0): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dddd' LIMIT 1;
Executing (caf7911b-5252-4e30-8801-5832f4e9c8e0): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (caf7911b-5252-4e30-8801-5832f4e9c8e0): COMMIT;
true
바디는 { user_id: 'dddd', password: 'd', email: 'd', passwordretype: 'd' }
Executing (26c82f39-be53-463b-a8d1-fb7602a87fb5): START TRANSACTION;
Executing (26c82f39-be53-463b-a8d1-fb7602a87fb5): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'dddd' LIMIT 1;
Executing (26c82f39-be53-463b-a8d1-fb7602a87fb5): COMMIT;
false
바디는 { user_id: 'k1', password: 'd', email: 'd', passwordretype: 'd' }
Executing (0ad98977-2722-4671-a363-5ed9cea59d2a): START TRANSACTION;
Executing (0ad98977-2722-4671-a363-5ed9cea59d2a): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'k1' LIMIT 1;
Executing (0ad98977-2722-4671-a363-5ed9cea59d2a): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (0ad98977-2722-4671-a363-5ed9cea59d2a): COMMIT;
true
바디는 { user_id: 'k1', password: 'd', email: 'd', passwordretype: 'd' }
Executing (fc8644bd-5ae6-4165-a26e-fc056c50a050): START TRANSACTION;
Executing (fc8644bd-5ae6-4165-a26e-fc056c50a050): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'k1' LIMIT 1;
Executing (fc8644bd-5ae6-4165-a26e-fc056c50a050): COMMIT;
false
바디는 { user_id: 'kim2', password: 'd', email: 'd', passwordretype: 'd' }
Executing (c3704312-8ab6-4afd-b2b7-0844dc7f9b9d): START TRANSACTION;
Executing (c3704312-8ab6-4afd-b2b7-0844dc7f9b9d): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'kim2' LIMIT 1;
Executing (c3704312-8ab6-4afd-b2b7-0844dc7f9b9d): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (c3704312-8ab6-4afd-b2b7-0844dc7f9b9d): COMMIT;
true
바디는 { user_id: 'kjy', password: 'd', email: 'd', passwordretype: 'd' }
Executing (dd1af1a7-9486-4b0d-9d4e-062c0ffb3c38): START TRANSACTION;
Executing (dd1af1a7-9486-4b0d-9d4e-062c0ffb3c38): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'kjy' LIMIT 1;
Executing (dd1af1a7-9486-4b0d-9d4e-062c0ffb3c38): INSERT INTO `marketApp_user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (dd1af1a7-9486-4b0d-9d4e-062c0ffb3c38): COMMIT;
true
바디는 { user_id: 'kjy', password: 'd', email: 'd', passwordretype: 'd' }
Executing (c220459a-7ba4-4128-8ec5-d5d04f1f8c91): START TRANSACTION;
Executing (c220459a-7ba4-4128-8ec5-d5d04f1f8c91): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'kjy' LIMIT 1;
Executing (c220459a-7ba4-4128-8ec5-d5d04f1f8c91): COMMIT;
false
바디는 { user_id: 'kjy', password: 'd', email: 'd', passwordretype: 'd' }
Executing (f3cc2e29-4c13-4e22-9e0c-6ac26202daaa): START TRANSACTION;
Executing (f3cc2e29-4c13-4e22-9e0c-6ac26202daaa): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `marketApp_user` AS `marketApp_user` WHERE `marketApp_user`.`nickname` = 'kjy' LIMIT 1;
Executing (f3cc2e29-4c13-4e22-9e0c-6ac26202daaa): COMMIT;
false
바디는 { user_id: '', password: '', email: '' }
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
바디는 {
  user_id: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  password: '44444444444'
}
Executing (8928c850-94d0-455f-a811-253cfcd008b6): START TRANSACTION;
Executing (8928c850-94d0-455f-a811-253cfcd008b6): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'dahyeon5' LIMIT 1;
Executing (8928c850-94d0-455f-a811-253cfcd008b6): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (8928c850-94d0-455f-a811-253cfcd008b6): COMMIT;
바디는 { email: 'd', user_id: 'd', password: 'd', passwordretype: 'd' }
Executing (de332938-747f-42c2-b9c3-e80f478fb65c): START TRANSACTION;
Executing (de332938-747f-42c2-b9c3-e80f478fb65c): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'd' LIMIT 1;
Executing (de332938-747f-42c2-b9c3-e80f478fb65c): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (de332938-747f-42c2-b9c3-e80f478fb65c): COMMIT;
바디는 { email: 'd', user_id: 'd', password: 'd', passwordretype: 'd' }
Executing (966fa7d5-4993-4c8a-8c5d-ca36e5a9e5ca): START TRANSACTION;
Executing (966fa7d5-4993-4c8a-8c5d-ca36e5a9e5ca): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'd' LIMIT 1;
Executing (966fa7d5-4993-4c8a-8c5d-ca36e5a9e5ca): COMMIT;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
user {
  dataValues: {
    id: 2,
    nickname: 'dahyeon5',
    email: 'dahyeon1712@dgu.ac.kr',
    mobile: null,
    address01: null,
    address02: null,
    role: 0,
    createdAt: 2022-01-19T04:49:00.000Z,
    updatedAt: 2022-01-19T04:49:00.000Z
  },
  _previousDataValues: {
    id: 2,
    nickname: 'dahyeon5',
    email: 'dahyeon1712@dgu.ac.kr',
    mobile: null,
    password: '44444444444',
    address01: null,
    address02: null,
    role: 0,
    createdAt: 2022-01-19T04:49:00.000Z,
    updatedAt: 2022-01-19T04:49:00.000Z
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',        'nickname',
      'email',     'mobile',
      'password',  'address01',
      'address02', 'role',
      'createdAt', 'updatedAt'
    ]
  },
  isNewRecord: false
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
user {
  dataValues: {
    id: 2,
    nickname: 'dahyeon5',
    email: 'dahyeon1712@dgu.ac.kr',
    mobile: null,
    address01: null,
    address02: null,
    role: 0,
    createdAt: 2022-01-19T04:49:00.000Z,
    updatedAt: 2022-01-19T04:49:00.000Z
  },
  _previousDataValues: {
    id: 2,
    nickname: 'dahyeon5',
    email: 'dahyeon1712@dgu.ac.kr',
    mobile: null,
    password: '44444444444',
    address01: null,
    address02: null,
    role: 0,
    createdAt: 2022-01-19T04:49:00.000Z,
    updatedAt: 2022-01-19T04:49:00.000Z
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',        'nickname',
      'email',     'mobile',
      'password',  'address01',
      'address02', 'role',
      'createdAt', 'updatedAt'
    ]
  },
  isNewRecord: false
}
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
바디는 { email: 'a', user_id: 'd', password: 'b', passwordretype: 'c' }
Executing (7c9da3e7-bc43-4062-8112-908806990a3e): START TRANSACTION;
Executing (7c9da3e7-bc43-4062-8112-908806990a3e): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'd' LIMIT 1;
Executing (7c9da3e7-bc43-4062-8112-908806990a3e): COMMIT;
바디는 { email: 'a', user_id: 'c', password: 'b', passwordretype: 'b' }
Executing (e12c9baa-8310-429c-bb16-1292a5997c3f): START TRANSACTION;
Executing (e12c9baa-8310-429c-bb16-1292a5997c3f): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'c' LIMIT 1;
Executing (e12c9baa-8310-429c-bb16-1292a5997c3f): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (e12c9baa-8310-429c-bb16-1292a5997c3f): COMMIT;
바디는 { email: 'a', user_id: 'c', password: 'b', passwordretype: 'd' }
Executing (3c490b5f-0e47-472a-add4-8a77d9c99bce): START TRANSACTION;
Executing (3c490b5f-0e47-472a-add4-8a77d9c99bce): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 'c' LIMIT 1;
Executing (3c490b5f-0e47-472a-add4-8a77d9c99bce): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
바디는 { user_id: '1233', password: '123', email: '' }
바디는 { user_id: '', password: '', email: '' }
바디는 { user_id: '123', password: '123', email: '' }
바디는 { user_id: '123', password: '123' }
바디는 { user_id: '123123', password: '123123' }
바디는 { email: '', password: '' }
바디는 { email: '', password: '324' }
바디는 { email: '', password: '324' }
바디는 { email: '', password: '324543' }
바디는 { email: '', password: '24234' }
바디는 { email: '', password: '' }
바디는 { email: '', password: '4234324' }
바디는 { email: '', password: '234' }
바디는 { email: '123123', password: '123' }
바디는 { email: '123123', password: '123' }
바디는 { email: '123123', password: '12322' }
바디는 { userId: '123', email: '123123', password: '123123' }
바디는 { user_id: '213', email: '13213', password: '2313' }
Executing (121bb66a-a1cc-4365-9b99-ae4047cb1b18): START TRANSACTION;
Executing (121bb66a-a1cc-4365-9b99-ae4047cb1b18): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '213' LIMIT 1;
Executing (121bb66a-a1cc-4365-9b99-ae4047cb1b18): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (121bb66a-a1cc-4365-9b99-ae4047cb1b18): COMMIT;
바디는 { user_id: '234', email: '124234', password: '234124' }
Executing (02f47fa0-e222-4188-9d13-1f46c01041e8): START TRANSACTION;
Executing (02f47fa0-e222-4188-9d13-1f46c01041e8): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '234' LIMIT 1;
Executing (02f47fa0-e222-4188-9d13-1f46c01041e8): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (02f47fa0-e222-4188-9d13-1f46c01041e8): COMMIT;
바디는 { user_id: '1234', email: '4134', password: '12321' }
Executing (d28d8a63-ef3e-4b4b-af46-0616ddb36758): START TRANSACTION;
Executing (d28d8a63-ef3e-4b4b-af46-0616ddb36758): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '1234' LIMIT 1;
Executing (d28d8a63-ef3e-4b4b-af46-0616ddb36758): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (d28d8a63-ef3e-4b4b-af46-0616ddb36758): COMMIT;
바디는 { user_id: '123', email: '123', password: '123' }
Executing (6cc0c364-42f7-4ff0-bcc0-0586ead5cc79): START TRANSACTION;
Executing (6cc0c364-42f7-4ff0-bcc0-0586ead5cc79): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '123' LIMIT 1;
Executing (6cc0c364-42f7-4ff0-bcc0-0586ead5cc79): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (6cc0c364-42f7-4ff0-bcc0-0586ead5cc79): COMMIT;
바디는 { user_id: '1234', email: '144', password: '214123' }
Executing (0149d344-c401-4561-bbe5-01d37a2f7726): START TRANSACTION;
Executing (0149d344-c401-4561-bbe5-01d37a2f7726): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '1234' LIMIT 1;
Executing (0149d344-c401-4561-bbe5-01d37a2f7726): COMMIT;
바디는 { user_id: '1234', email: '144', password: '214123' }
Executing (a4feef66-61f3-4c5a-a796-e4c09c61dc18): START TRANSACTION;
Executing (a4feef66-61f3-4c5a-a796-e4c09c61dc18): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '1234' LIMIT 1;
Executing (a4feef66-61f3-4c5a-a796-e4c09c61dc18): COMMIT;
바디는 { user_id: '1234', email: '14455', password: '214123' }
Executing (40f5e3b9-fc90-43f8-a3db-79777a7aea77): START TRANSACTION;
Executing (40f5e3b9-fc90-43f8-a3db-79777a7aea77): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '1234' LIMIT 1;
Executing (40f5e3b9-fc90-43f8-a3db-79777a7aea77): COMMIT;
바디는 { user_id: '44', email: '1234', password: '34' }
Executing (7df41535-1eaa-40cc-b302-8c1f0cc811a7): START TRANSACTION;
Executing (7df41535-1eaa-40cc-b302-8c1f0cc811a7): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '44' LIMIT 1;
Executing (7df41535-1eaa-40cc-b302-8c1f0cc811a7): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (7df41535-1eaa-40cc-b302-8c1f0cc811a7): COMMIT;
바디는 { user_id: '124', email: '44', password: '23444' }
Executing (f13dab1e-697d-4006-9407-b2681aef276b): START TRANSACTION;
Executing (f13dab1e-697d-4006-9407-b2681aef276b): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '124' LIMIT 1;
Executing (f13dab1e-697d-4006-9407-b2681aef276b): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (f13dab1e-697d-4006-9407-b2681aef276b): COMMIT;
바디는 { user_id: '23423', email: '32424', password: '3242' }
Executing (2e084969-07b2-4fbc-9ec3-9ca6c9350ad4): START TRANSACTION;
Executing (2e084969-07b2-4fbc-9ec3-9ca6c9350ad4): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '23423' LIMIT 1;
Executing (2e084969-07b2-4fbc-9ec3-9ca6c9350ad4): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (2e084969-07b2-4fbc-9ec3-9ca6c9350ad4): COMMIT;
바디는 { user_id: '2342', email: '424', password: '3423' }
Executing (7ab958a7-b2c3-487c-85b3-827b8d3c1f39): START TRANSACTION;
Executing (7ab958a7-b2c3-487c-85b3-827b8d3c1f39): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '2342' LIMIT 1;
Executing (7ab958a7-b2c3-487c-85b3-827b8d3c1f39): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (7ab958a7-b2c3-487c-85b3-827b8d3c1f39): COMMIT;
바디는 { user_id: '1432', email: '42', password: '4324' }
Executing (5208eb3a-43b9-484f-b304-df62d0038807): START TRANSACTION;
Executing (5208eb3a-43b9-484f-b304-df62d0038807): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '1432' LIMIT 1;
Executing (5208eb3a-43b9-484f-b304-df62d0038807): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (5208eb3a-43b9-484f-b304-df62d0038807): COMMIT;
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '888', email: '888', password: '888' }
Executing (9b7fa047-c865-4b29-9c2d-e19908c38fe0): START TRANSACTION;
Executing (9b7fa047-c865-4b29-9c2d-e19908c38fe0): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '888' LIMIT 1;
Executing (9b7fa047-c865-4b29-9c2d-e19908c38fe0): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (9b7fa047-c865-4b29-9c2d-e19908c38fe0): COMMIT;
바디는 { user_id: '888', email: '888', password: '888' }
Executing (faf0759b-615c-40a0-af97-f5a10fa30ddb): START TRANSACTION;
Executing (faf0759b-615c-40a0-af97-f5a10fa30ddb): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = '888' LIMIT 1;
Executing (faf0759b-615c-40a0-af97-f5a10fa30ddb): COMMIT;
바디는 { user_id: '', email: '888', password: '888' }
바디는 { email: '888', password: '888' }
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '', password: '' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '44' AND `user`.`password` = '44' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '22' AND `user`.`password` = '22' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '22' AND `user`.`password` = '43' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '88' AND `user`.`password` = '88' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
인증 요청 발생
userInfo 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642642740,
  exp: 1642646340
}
{
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642642740,
  exp: 1642646340
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
바디는 { user_id: '', email: '888', password: '888' }
바디는 { user_id: '', email: '888', password: '888' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
인증 요청 발생
userInfo 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642642856,
  exp: 1642646456
}
{
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642642856,
  exp: 1642646456
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642642740,
  exp: 1642646340
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642644642,
  exp: 1642648242
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642644642,
  exp: 1642648242
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642644743,
  exp: 1642648343
}
userInfoFromRefreshToken 는 null
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642644893,
  exp: 1642648493
}
userInfoFromRefreshToken 는 null
{
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642644893,
  exp: 1642648493
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '888' AND `user`.`password` = '888' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642646636,
  exp: 1642650236
}
userInfoFromRefreshToken 는 null
{
  id: 15,
  nickname: '888',
  email: '888',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:29:42.000Z',
  updatedAt: '2022-01-19T17:29:42.000Z',
  iat: 1642646636,
  exp: 1642650236
}
바디는 {
  email: 't@t.com',
  user_id: 't',
  password: 't1234',
  passwordretype: 't1234',
  undefined: 't'
}
Executing (f681ea4d-e6ee-42d4-afbd-f9a56468bce1): START TRANSACTION;
Executing (f681ea4d-e6ee-42d4-afbd-f9a56468bce1): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`nickname` = 't' LIMIT 1;
Executing (f681ea4d-e6ee-42d4-afbd-f9a56468bce1): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (f681ea4d-e6ee-42d4-afbd-f9a56468bce1): COMMIT;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'f@f.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'f@f.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'f@f.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'a@a.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'sdfsadf' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't7@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't7@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't4@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't7@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 't@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm2@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm2@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm4@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm4@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm4@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm5@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkd@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkd@gmail.com' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dt' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dt' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dtt' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dtt' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'ㅇ' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dttt' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dttt@t.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmd4rkdm@gmail.com' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642685249,
  exp: 1642688849
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642685279,
  exp: 1642688879
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642685457,
  exp: 1642689057
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm2@gmail.com' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `title`, `contents`, `price`, `image_src`, `user_id`, `createdAt`, `updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `title`, `contents`, `price`, `image_src`, `user_id`, `createdAt`, `updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642740982,
  exp: 1642744582
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642740982,
  exp: 1642744582
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642740982,
  exp: 1642744582
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642740982,
  exp: 1642744582
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741128,
  exp: 1642744728
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741128,
  exp: 1642744728
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741128,
  exp: 1642744728
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741128,
  exp: 1642744728
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741264,
  exp: 1642744864
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741307,
  exp: 1642744907
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741307,
  exp: 1642744907
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741321,
  exp: 1642744921
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741321,
  exp: 1642744921
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741321,
  exp: 1642744921
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741321,
  exp: 1642744921
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741364,
  exp: 1642744964
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741364,
  exp: 1642744964
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741396,
  exp: 1642744996
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741396,
  exp: 1642744996
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741425,
  exp: 1642745025
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741507,
  exp: 1642745107
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741507,
  exp: 1642745107
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741507,
  exp: 1642745107
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741507,
  exp: 1642745107
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741630,
  exp: 1642745230
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741675,
  exp: 1642745275
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741675,
  exp: 1642745275
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741675,
  exp: 1642745275
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741675,
  exp: 1642745275
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741715,
  exp: 1642745315
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741715,
  exp: 1642745315
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741730,
  exp: 1642745330
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741730,
  exp: 1642745330
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741793,
  exp: 1642745393
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741793,
  exp: 1642745393
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741917,
  exp: 1642745517
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642741917,
  exp: 1642745517
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642742247,
  exp: 1642745847
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642742247,
  exp: 1642745847
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642742295,
  exp: 1642745895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642742295,
  exp: 1642745895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '10';
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dg2u.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT '18';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT '1';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT '1';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742990,
  exp: 1642746590
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742990,
  exp: 1642746590
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743043,
  exp: 1642746643
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743043,
  exp: 1642746643
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743043,
  exp: 1642746643
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743043,
  exp: 1642746643
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642742450,
  exp: 1642746050
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743152,
  exp: 1642746752
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743227,
  exp: 1642746827
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743227,
  exp: 1642746827
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743227,
  exp: 1642746827
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743227,
  exp: 1642746827
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743265,
  exp: 1642746865
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743265,
  exp: 1642746865
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743265,
  exp: 1642746865
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743265,
  exp: 1642746865
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743295,
  exp: 1642746895
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743561,
  exp: 1642747161
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743640,
  exp: 1642747240
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743668,
  exp: 1642747268
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743738,
  exp: 1642747338
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743738,
  exp: 1642747338
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743790,
  exp: 1642747390
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642743790,
  exp: 1642747390
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744118,
  exp: 1642747718
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744118,
  exp: 1642747718
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744208,
  exp: 1642747808
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744208,
  exp: 1642747808
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744313,
  exp: 1642747913
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744313,
  exp: 1642747913
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '2';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '7';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT '7';
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642744406,
  exp: 1642748006
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746731,
  exp: 1642750331
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746731,
  exp: 1642750331
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746766,
  exp: 1642750366
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746766,
  exp: 1642750366
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746801,
  exp: 1642750401
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746820,
  exp: 1642750420
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746820,
  exp: 1642750420
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746820,
  exp: 1642750420
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746820,
  exp: 1642750420
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746855,
  exp: 1642750455
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746855,
  exp: 1642750455
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746907,
  exp: 1642750507
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746907,
  exp: 1642750507
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746994,
  exp: 1642750594
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642746994,
  exp: 1642750594
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747450,
  exp: 1642751050
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dahyeon1712@dgu.ac.kr' AND `user`.`password` = '44444444444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747569,
  exp: 1642751169
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747610,
  exp: 1642751210
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747604,
  exp: 1642751204
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747604,
  exp: 1642751204
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747604,
  exp: 1642751204
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747604,
  exp: 1642751204
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747604,
  exp: 1642751204
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
바디는 { email: '삭제할계2정', password: '123', user_id: '234' }
Executing (f41a157d-2bed-4bea-a8ec-2432271b7919): START TRANSACTION;
Executing (f41a157d-2bed-4bea-a8ec-2432271b7919): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '삭제할계2정' LIMIT 1;
Executing (f41a157d-2bed-4bea-a8ec-2432271b7919): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (f41a157d-2bed-4bea-a8ec-2432271b7919): COMMIT;
바디는 { email: '삭제할계2정', password: '123', user_id: '234' }
Executing (ea4d4761-6db9-4bd3-8c23-48d0b5270e99): START TRANSACTION;
Executing (ea4d4761-6db9-4bd3-8c23-48d0b5270e99): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '삭제할계2정' LIMIT 1;
Executing (ea4d4761-6db9-4bd3-8c23-48d0b5270e99): COMMIT;
바디는 { email: '삭제할계2정', password: '123', user_id: '2344' }
Executing (73766b0f-5676-4364-aef9-35ec3665d916): START TRANSACTION;
Executing (73766b0f-5676-4364-aef9-35ec3665d916): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '삭제할계2정' LIMIT 1;
Executing (73766b0f-5676-4364-aef9-35ec3665d916): COMMIT;
바디는 { email: '123123', password: '123123', user_id: '2344' }
Executing (9570089c-3377-43ba-82a1-f50bbf182d1d): START TRANSACTION;
Executing (9570089c-3377-43ba-82a1-f50bbf182d1d): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' LIMIT 1;
Executing (9570089c-3377-43ba-82a1-f50bbf182d1d): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (9570089c-3377-43ba-82a1-f50bbf182d1d): COMMIT;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747703,
  exp: 1642751303
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747772,
  exp: 1642751372
}
userInfoFromRefreshToken 는 null
10
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642747772,
  exp: 1642751372
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
바디는 { email: '123', password: '123' }
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1642751426
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1642751426
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
바디는 { user_id: '123', email: '123', password: '123123' }
Executing (ad9664f4-3484-43c1-9b8c-24cd5bf1b298): START TRANSACTION;
Executing (ad9664f4-3484-43c1-9b8c-24cd5bf1b298): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' LIMIT 1;
Executing (ad9664f4-3484-43c1-9b8c-24cd5bf1b298): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748123,
  exp: 1642751723
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
바디는 { user_id: '', email: '123123', password: '123123' }
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748254,
  exp: 1642751854
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748254,
  exp: 1642751854
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748280,
  exp: 1642751880
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748280,
  exp: 1642751880
}
userInfoFromRefreshToken 는 null
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
인증 요청 발생
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748649,
  exp: 1642752249
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748732,
  exp: 1642752332
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748732,
  exp: 1645340732
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748758,
  exp: 1642752358
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748758,
  exp: 1645340758
}
{
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748758,
  exp: 1642752358
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748758,
  exp: 1645340758
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748758,
  exp: 1645340758
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1642752396
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1645340796
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1642751426
}
userInfoFromRefreshToken 는 {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1645339826
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 9 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1642751426
}
userInfoFromRefreshToken 는 {
  id: 9,
  nickname: '123',
  email: '123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T17:22:58.000Z',
  updatedAt: '2022-01-19T17:22:58.000Z',
  iat: 1642747826,
  exp: 1645339826
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 9 undefined
바디는 { email: '123123', password: '123123', user_id: '2344' }
Executing (e636ad41-02ca-4aa8-829d-a29c64a1b5d9): START TRANSACTION;
Executing (e636ad41-02ca-4aa8-829d-a29c64a1b5d9): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' LIMIT 1;
Executing (e636ad41-02ca-4aa8-829d-a29c64a1b5d9): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1642752483
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1645340883
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1642752483
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1645340883
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1642752483
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1645340883
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1642752483
}
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1645340883
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 32 undefined
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642748737,
  exp: 1642752337
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642749194,
  exp: 1642752794
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642749584,
  exp: 1642753184
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 2,
  nickname: 'dahyeon5',
  email: 'dahyeon1712@dgu.ac.kr',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T04:49:00.000Z',
  updatedAt: '2022-01-19T04:49:00.000Z',
  iat: 1642749584,
  exp: 1642753184
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 2 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 4,
  nickname: 'z',
  email: 'z',
  mobile: null,
  address01: null,
  address02: null,
  role: 1,
  createdAt: '2022-01-19T07:38:23.000Z',
  updatedAt: '2022-01-21T07:20:04.000Z',
  iat: 1642749629,
  exp: 1642753229
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 4 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 4,
  nickname: 'z',
  email: 'z',
  mobile: null,
  address01: null,
  address02: null,
  role: 1,
  createdAt: '2022-01-19T07:38:23.000Z',
  updatedAt: '2022-01-21T07:20:04.000Z',
  iat: 1642749629,
  exp: 1642753229
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 4 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642749815,
  exp: 1642753415
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748883,
  exp: 1645340883
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752767,
  exp: 1642756367
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642752963,
  exp: 1642756563
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753771,
  exp: 1642757371
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753836,
  exp: 1642757436
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753875,
  exp: 1642757475
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642753970,
  exp: 1642757570
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1645340796
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1645340796
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1645340796
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 32,
  nickname: '2344',
  email: '123123',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T06:48:23.000Z',
  updatedAt: '2022-01-21T06:48:23.000Z',
  iat: 1642748796,
  exp: 1645340796
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754028,
  exp: 1642757628
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754185,
  exp: 1642757785
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (27d2697b-3a41-452e-93e7-eb843c8ec122): START TRANSACTION;
Executing (27d2697b-3a41-452e-93e7-eb843c8ec122): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (27d2697b-3a41-452e-93e7-eb843c8ec122): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (27d2697b-3a41-452e-93e7-eb843c8ec122): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' AND `user`.`password` = '4444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 34,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:36:56.000Z',
  updatedAt: '2022-01-21T08:36:56.000Z',
  iat: 1642754222,
  exp: 1642757822
}
userInfoFromRefreshToken 는 {
  id: 34,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:36:56.000Z',
  updatedAt: '2022-01-21T08:36:56.000Z',
  iat: 1642754222,
  exp: 1645346222
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 34 34
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzQsIm5pY2tuYW1lIjoiNDQ0NCIsImVtYWlsIjoiNDQ0NCIsIm1vYmlsZSI6bnVsbCwiYWRkcmVzczAxIjpudWxsLCJhZGRyZXNzMDIiOm51bGwsInJvbGUiOjAsImNyZWF0ZWRBdCI6IjIwMjItMDEtMjFUMDg6MzY6NTYuMDAwWiIsInVwZGF0ZWRBdCI6IjIwMjItMDEtMjFUMDg6MzY6NTYuMDAwWiIsImlhdCI6MTY0Mjc1NDIyMiwiZXhwIjoxNjQ1MzQ2MjIyfQ.pCvtaycA1Mrnlk5dRCufEdv4ZnUfV9mQ0J09hUcMPG0'
}
Executing (default): DELETE FROM `user` WHERE `id` = 34
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (6e8309dc-0228-4b63-a646-2b87dceb3bdd): START TRANSACTION;
Executing (6e8309dc-0228-4b63-a646-2b87dceb3bdd): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (6e8309dc-0228-4b63-a646-2b87dceb3bdd): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (6e8309dc-0228-4b63-a646-2b87dceb3bdd): COMMIT;
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (d6bda90a-fe48-437d-b217-ea43d86247f0): START TRANSACTION;
Executing (d6bda90a-fe48-437d-b217-ea43d86247f0): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (d6bda90a-fe48-437d-b217-ea43d86247f0): COMMIT;
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (0d70efa7-1871-4063-bf15-1efd8341efb8): START TRANSACTION;
Executing (0d70efa7-1871-4063-bf15-1efd8341efb8): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (0d70efa7-1871-4063-bf15-1efd8341efb8): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' AND `user`.`password` = '4444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754490,
  exp: 1642758090
}
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754490,
  exp: 1645346490
}
{
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754490,
  exp: 1642758090
}
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (e36ca0d6-2f16-4463-8892-398da51dbfa3): START TRANSACTION;
Executing (e36ca0d6-2f16-4463-8892-398da51dbfa3): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (e36ca0d6-2f16-4463-8892-398da51dbfa3): COMMIT;
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (1e9779e7-72fe-4836-b6a3-f7792b3e8c87): START TRANSACTION;
Executing (1e9779e7-72fe-4836-b6a3-f7792b3e8c87): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (1e9779e7-72fe-4836-b6a3-f7792b3e8c87): COMMIT;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754490,
  exp: 1645346490
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754490,
  exp: 1645346490
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' AND `user`.`password` = '4444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754510,
  exp: 1642758110
}
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754510,
  exp: 1645346510
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 35 35
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUsIm5pY2tuYW1lIjoiNDQ0NCIsImVtYWlsIjoiNDQ0NCIsIm1vYmlsZSI6bnVsbCwiYWRkcmVzczAxIjpudWxsLCJhZGRyZXNzMDIiOm51bGwsInJvbGUiOjAsImNyZWF0ZWRBdCI6IjIwMjItMDEtMjFUMDg6NDE6MTYuMDAwWiIsInVwZGF0ZWRBdCI6IjIwMjItMDEtMjFUMDg6NDE6MTYuMDAwWiIsImlhdCI6MTY0Mjc1NDUxMCwiZXhwIjoxNjQ1MzQ2NTEwfQ.oMhGl1MDckuPIE0btAZBnTMYlrpaCMVQGktpskOdL2k'
}
Executing (default): DELETE FROM `user` WHERE `id` = 35
1
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (ecacc477-4ad2-47b7-b9fd-6685ab4ee4b6): START TRANSACTION;
Executing (ecacc477-4ad2-47b7-b9fd-6685ab4ee4b6): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (ecacc477-4ad2-47b7-b9fd-6685ab4ee4b6): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (ecacc477-4ad2-47b7-b9fd-6685ab4ee4b6): COMMIT;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754510,
  exp: 1645346510
}
바디는 { user_id: '4444', email: '4444', password: '4444' }
Executing (2ea61ac5-0d5c-495c-bfe3-2ceadce0d1cd): START TRANSACTION;
Executing (2ea61ac5-0d5c-495c-bfe3-2ceadce0d1cd): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' LIMIT 1;
Executing (2ea61ac5-0d5c-495c-bfe3-2ceadce0d1cd): COMMIT;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 35,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:16.000Z',
  updatedAt: '2022-01-21T08:41:16.000Z',
  iat: 1642754510,
  exp: 1645346510
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '4444' AND `user`.`password` = '4444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754429,
  exp: 1642758029
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 36,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:59.000Z',
  updatedAt: '2022-01-21T08:41:59.000Z',
  iat: 1642754530,
  exp: 1642758130
}
userInfoFromRefreshToken 는 {
  id: 36,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:59.000Z',
  updatedAt: '2022-01-21T08:41:59.000Z',
  iat: 1642754530,
  exp: 1645346530
}
{
  id: 36,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:59.000Z',
  updatedAt: '2022-01-21T08:41:59.000Z',
  iat: 1642754530,
  exp: 1642758130
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 36,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:59.000Z',
  updatedAt: '2022-01-21T08:41:59.000Z',
  iat: 1642754530,
  exp: 1645346530
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 36,
  nickname: '4444',
  email: '4444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:41:59.000Z',
  updatedAt: '2022-01-21T08:41:59.000Z',
  iat: 1642754530,
  exp: 1645346530
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
바디는 { user_id: '444', email: '444', password: '444' }
Executing (93f97821-d71c-4cf4-bbbf-2b511949b0b5): START TRANSACTION;
Executing (93f97821-d71c-4cf4-bbbf-2b511949b0b5): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (93f97821-d71c-4cf4-bbbf-2b511949b0b5): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (93f97821-d71c-4cf4-bbbf-2b511949b0b5): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 37,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:37.000Z',
  updatedAt: '2022-01-21T08:42:37.000Z',
  iat: 1642754559,
  exp: 1642758159
}
userInfoFromRefreshToken 는 {
  id: 37,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:37.000Z',
  updatedAt: '2022-01-21T08:42:37.000Z',
  iat: 1642754559,
  exp: 1645346559
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 37 37
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzcsIm5pY2tuYW1lIjoiNDQ0IiwiZW1haWwiOiI0NDQiLCJtb2JpbGUiOm51bGwsImFkZHJlc3MwMSI6bnVsbCwiYWRkcmVzczAyIjpudWxsLCJyb2xlIjowLCJjcmVhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQyOjM3LjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQyOjM3LjAwMFoiLCJpYXQiOjE2NDI3NTQ1NTksImV4cCI6MTY0NTM0NjU1OX0.LuArAdaLxjNIz7RuV71tXgEm2xOlxdPA4e3NEUXT5_A'
}
Executing (default): DELETE FROM `user` WHERE `id` = 37
1
바디는 { user_id: '444', email: '444', password: '444' }
Executing (8ed09fa4-9432-4226-960c-e7bb335ecc51): START TRANSACTION;
Executing (8ed09fa4-9432-4226-960c-e7bb335ecc51): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (8ed09fa4-9432-4226-960c-e7bb335ecc51): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (8ed09fa4-9432-4226-960c-e7bb335ecc51): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754562,
  exp: 1642758162
}
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754562,
  exp: 1645346562
}
{
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754562,
  exp: 1642758162
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754562,
  exp: 1645346562
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754562,
  exp: 1645346562
}
바디는 { user_id: '444', email: '444', password: '444' }
Executing (71f6ac3e-5e67-409f-bf46-8d10aae3c242): START TRANSACTION;
Executing (71f6ac3e-5e67-409f-bf46-8d10aae3c242): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (71f6ac3e-5e67-409f-bf46-8d10aae3c242): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1642758216
}
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1645346616
}
{
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1642758216
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1645346616
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1645346616
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754616,
  exp: 1645346616
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754641,
  exp: 1642758241
}
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754641,
  exp: 1645346641
}
{
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754641,
  exp: 1642758241
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754641,
  exp: 1645346641
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754669,
  exp: 1642758269
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754715,
  exp: 1642758315
}
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754715,
  exp: 1645346715
}
{
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754715,
  exp: 1642758315
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754715,
  exp: 1642758315
}
userInfoFromRefreshToken 는 {
  id: 38,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:42:41.000Z',
  updatedAt: '2022-01-21T08:42:41.000Z',
  iat: 1642754715,
  exp: 1645346715
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 38 38
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzgsIm5pY2tuYW1lIjoiNDQ0IiwiZW1haWwiOiI0NDQiLCJtb2JpbGUiOm51bGwsImFkZHJlc3MwMSI6bnVsbCwiYWRkcmVzczAyIjpudWxsLCJyb2xlIjowLCJjcmVhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQyOjQxLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQyOjQxLjAwMFoiLCJpYXQiOjE2NDI3NTQ3MTUsImV4cCI6MTY0NTM0NjcxNX0.I37C1iCB2JK0ufs2-0E9FFCWMMEb7oBlfrsVOV-pbhQ'
}
Executing (default): DELETE FROM `user` WHERE `id` = 38
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754669,
  exp: 1642758269
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754742,
  exp: 1642758342
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754742,
  exp: 1642758342
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754742,
  exp: 1642758342
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754742,
  exp: 1642758342
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754742,
  exp: 1642758342
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754764,
  exp: 1642758364
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754764,
  exp: 1642758364
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754866,
  exp: 1642758466
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754879,
  exp: 1642758479
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754879,
  exp: 1642758479
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '444', email: '444', password: '444' }
Executing (7b107ed3-df76-48eb-9a27-b22cd711a2e3): START TRANSACTION;
Executing (7b107ed3-df76-48eb-9a27-b22cd711a2e3): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (7b107ed3-df76-48eb-9a27-b22cd711a2e3): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (7b107ed3-df76-48eb-9a27-b22cd711a2e3): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 39,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:23.000Z',
  updatedAt: '2022-01-21T08:48:23.000Z',
  iat: 1642754903,
  exp: 1642758503
}
userInfoFromRefreshToken 는 {
  id: 39,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:23.000Z',
  updatedAt: '2022-01-21T08:48:23.000Z',
  iat: 1642754903,
  exp: 1645346903
}
{
  id: 39,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:23.000Z',
  updatedAt: '2022-01-21T08:48:23.000Z',
  iat: 1642754903,
  exp: 1642758503
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 39,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:23.000Z',
  updatedAt: '2022-01-21T08:48:23.000Z',
  iat: 1642754903,
  exp: 1642758503
}
userInfoFromRefreshToken 는 {
  id: 39,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:23.000Z',
  updatedAt: '2022-01-21T08:48:23.000Z',
  iat: 1642754903,
  exp: 1645346903
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 39 39
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzksIm5pY2tuYW1lIjoiNDQ0IiwiZW1haWwiOiI0NDQiLCJtb2JpbGUiOm51bGwsImFkZHJlc3MwMSI6bnVsbCwiYWRkcmVzczAyIjpudWxsLCJyb2xlIjowLCJjcmVhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQ4OjIzLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQ4OjIzLjAwMFoiLCJpYXQiOjE2NDI3NTQ5MDMsImV4cCI6MTY0NTM0NjkwM30.5YxAHsmoHfP70XsjGZaTZi4R9C88sPose5ryIQYQbtw'
}
Executing (default): DELETE FROM `user` WHERE `id` = 39
1
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
바디는 { user_id: '444', email: '444', password: '444' }
Executing (c40c6c42-605d-4cdb-afb8-320b20234729): START TRANSACTION;
Executing (c40c6c42-605d-4cdb-afb8-320b20234729): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (c40c6c42-605d-4cdb-afb8-320b20234729): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (c40c6c42-605d-4cdb-afb8-320b20234729): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
바디는 { user_id: '444', email: '444', password: '444' }
Executing (e529d744-17d3-43f8-a15f-dbc93b752905): START TRANSACTION;
Executing (e529d744-17d3-43f8-a15f-dbc93b752905): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' LIMIT 1;
Executing (e529d744-17d3-43f8-a15f-dbc93b752905): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '444' AND `user`.`password` = '444' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 40,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:32.000Z',
  updatedAt: '2022-01-21T08:48:32.000Z',
  iat: 1642754914,
  exp: 1642758514
}
userInfoFromRefreshToken 는 {
  id: 40,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:32.000Z',
  updatedAt: '2022-01-21T08:48:32.000Z',
  iat: 1642754914,
  exp: 1645346914
}
{
  id: 40,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:32.000Z',
  updatedAt: '2022-01-21T08:48:32.000Z',
  iat: 1642754914,
  exp: 1642758514
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 40,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:32.000Z',
  updatedAt: '2022-01-21T08:48:32.000Z',
  iat: 1642754914,
  exp: 1642758514
}
userInfoFromRefreshToken 는 {
  id: 40,
  nickname: '444',
  email: '444',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-21T08:48:32.000Z',
  updatedAt: '2022-01-21T08:48:32.000Z',
  iat: 1642754914,
  exp: 1645346914
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 40 40
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDAsIm5pY2tuYW1lIjoiNDQ0IiwiZW1haWwiOiI0NDQiLCJtb2JpbGUiOm51bGwsImFkZHJlc3MwMSI6bnVsbCwiYWRkcmVzczAyIjpudWxsLCJyb2xlIjowLCJjcmVhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQ4OjMyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIyLTAxLTIxVDA4OjQ4OjMyLjAwMFoiLCJpYXQiOjE2NDI3NTQ5MTQsImV4cCI6MTY0NTM0NjkxNH0.EE6hdXsKsuqt0hFxvud62mC_rAhA3aKQJA7K8xz2ueg'
}
Executing (default): DELETE FROM `user` WHERE `id` = 40
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754879,
  exp: 1642758479
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754879,
  exp: 1642758479
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642754965,
  exp: 1642758565
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755019,
  exp: 1642758619
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755019,
  exp: 1642758619
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755019,
  exp: 1642758619
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755019,
  exp: 1642758619
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755019,
  exp: 1642758619
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755047,
  exp: 1642758647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755047,
  exp: 1642758647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755083,
  exp: 1642758683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755083,
  exp: 1642758683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755083,
  exp: 1642758683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755083,
  exp: 1642758683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755083,
  exp: 1642758683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755101,
  exp: 1642758701
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755101,
  exp: 1642758701
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755158,
  exp: 1642758758
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755158,
  exp: 1642758758
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755187,
  exp: 1642758787
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755187,
  exp: 1642758787
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755191,
  exp: 1642758791
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755191,
  exp: 1642758791
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755191,
  exp: 1642758791
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755191,
  exp: 1642758791
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755204,
  exp: 1642758804
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755204,
  exp: 1642758804
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642755212,
  exp: 1642758812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 28 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756729,
  exp: 1642760329
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756751,
  exp: 1642760351
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756751,
  exp: 1642760351
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756751,
  exp: 1642760351
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756751,
  exp: 1642760351
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756751,
  exp: 1642760351
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756844,
  exp: 1642760444
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756891,
  exp: 1642760491
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756932,
  exp: 1642760532
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756942,
  exp: 1642760542
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756973,
  exp: 1642760573
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756973,
  exp: 1642760573
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756973,
  exp: 1642760573
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642756973,
  exp: 1642760573
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765047,
  exp: 1642768647
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765047,
  exp: 1642768647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765047,
  exp: 1642768647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765047,
  exp: 1642768647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765047,
  exp: 1642768647
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765068,
  exp: 1642768668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765161,
  exp: 1642768761
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765161,
  exp: 1642768761
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765161,
  exp: 1642768761
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642765161,
  exp: 1642768761
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642765872,
  exp: 1642769472
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642765872,
  exp: 1642769472
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642766976,
  exp: 1642770576
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767054,
  exp: 1642770654
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767083,
  exp: 1642770683
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767170,
  exp: 1642770770
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 28 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767212,
  exp: 1642770812
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767769,
  exp: 1642771369
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767769,
  exp: 1642771369
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642767789,
  exp: 1642771389
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768008,
  exp: 1642771608
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768017,
  exp: 1642771617
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768017,
  exp: 1642771617
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768017,
  exp: 1642771617
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768017,
  exp: 1642771617
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768040,
  exp: 1642771640
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768040,
  exp: 1642771640
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 28 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768051,
  exp: 1642771651
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768051,
  exp: 1642771651
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768051,
  exp: 1642771651
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768068,
  exp: 1642771668
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768128,
  exp: 1642771728
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768136,
  exp: 1642771736
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768136,
  exp: 1642771736
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768136,
  exp: 1642771736
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768136,
  exp: 1642771736
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768136,
  exp: 1642771736
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768179,
  exp: 1642771779
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768179,
  exp: 1642771779
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768179,
  exp: 1642771779
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768208,
  exp: 1642771808
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768208,
  exp: 1642771808
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768208,
  exp: 1642771808
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768208,
  exp: 1642771808
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768222,
  exp: 1642771822
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768222,
  exp: 1642771822
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768222,
  exp: 1642771822
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768222,
  exp: 1642771822
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768237,
  exp: 1642771837
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768237,
  exp: 1642771837
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768237,
  exp: 1642771837
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768237,
  exp: 1642771837
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768251,
  exp: 1642771851
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
바디는 { user_id: '', email: '', password: '' }
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642768319,
  exp: 1642771919
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642769401,
  exp: 1642773001
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 28 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769409,
  exp: 1642773009
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769409,
  exp: 1642773009
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769409,
  exp: 1642773009
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769425,
  exp: 1642773025
}
userInfoFromRefreshToken 는 null
10
Executing (default): SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt`, `user`.`id` AS `user.id` FROM `post` AS `post` INNER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` AND `user`.`id` = 3 ORDER BY `post`.`createdAt` DESC LIMIT 10;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769425,
  exp: 1642773025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769425,
  exp: 1642773025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769425,
  exp: 1642773025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642769425,
  exp: 1642773025
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642776378,
  exp: 1642779978
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642776378,
  exp: 1642779978
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'd',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-20T07:30:53.000Z',
  iat: 1642776378,
  exp: 1642779978
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `title`, `contents`, `price`, `image_src`, `user_id`, `createdAt`, `updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '123123' AND `user`.`password` = '123123' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1645417433
}
{
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1645417433
}
{
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1645417433
}
{
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642825433,
  exp: 1642829033
}
바디는 {
  user_id: 'string, ID',
  email: 'string, 이메일',
  password: 'string, 암호화된 비밀번호',
  phone: 'string, 연락처'
}
Executing (90c45945-b729-4993-a2a9-6e789f63722d): START TRANSACTION;
Executing (90c45945-b729-4993-a2a9-6e789f63722d): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'string, 이메일' LIMIT 1;
Executing (90c45945-b729-4993-a2a9-6e789f63722d): COMMIT;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'a@a.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'a@a.com' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
바디는 { email: 'dh1', password: 'dh1', user_id: '2344' }
Executing (df58834c-6086-49dc-9012-083f5fb99841): START TRANSACTION;
Executing (df58834c-6086-49dc-9012-083f5fb99841): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dh1' LIMIT 1;
Executing (df58834c-6086-49dc-9012-083f5fb99841): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (df58834c-6086-49dc-9012-083f5fb99841): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dh1' AND `user`.`password` = 'dh1' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 41,
  nickname: '2344',
  email: 'dh1',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T09:33:16.000Z',
  updatedAt: '2022-01-22T09:33:16.000Z',
  iat: 1642844006,
  exp: 1642847606
}
userInfoFromRefreshToken 는 {
  id: 41,
  nickname: '2344',
  email: 'dh1',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T09:33:16.000Z',
  updatedAt: '2022-01-22T09:33:16.000Z',
  iat: 1642844006,
  exp: 1645436006
}
Executing (default): UPDATE `user` SET `email`=?,`nickname`=?,`updatedAt`=? WHERE `id` = ?
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'nick',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-22T09:42:22.000Z',
  iat: 1642855408,
  exp: 1642859008
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'nick',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-22T09:42:22.000Z',
  iat: 1642855432,
  exp: 1642859032
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'nick',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-22T09:42:22.000Z',
  iat: 1642855535,
  exp: 1642859135
}
userInfoFromRefreshToken 는 null
바디는 { email: 'test1040', password: 'test1040' }
바디는 { email: 'test1040', password: 'test1040', user_Id: 'test1040' }
바디는 { email: 'test1040', password: 'test1040', user_id: 'test1040' }
Executing (bdcd9a54-fed1-4834-be83-25f51718e280): START TRANSACTION;
Executing (bdcd9a54-fed1-4834-be83-25f51718e280): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test1040' LIMIT 1;
Executing (bdcd9a54-fed1-4834-be83-25f51718e280): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (bdcd9a54-fed1-4834-be83-25f51718e280): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test1040' AND `user`.`password` = 'test1040' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '디지털기기' LIMIT 1;
Executing (default): INSERT INTO `post` (`id`,`title`,`contents`,`price`,`image_src`,`user_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `post_has_categories` (`post_id`,`categories_id`) VALUES (?,?);
post_has_categories {
  dataValues: { post_id: 44, categories_id: 1 },
  _previousDataValues: { post_id: 44, categories_id: 1 },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false,
  null: undefined
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '디지털기기4' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '디지털기기' LIMIT 1;
Executing (default): INSERT INTO `post` (`id`,`title`,`contents`,`price`,`image_src`,`user_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `post_has_categories` (`post_id`,`categories_id`) VALUES (?,?);
post_has_categories {
  dataValues: { post_id: 45, categories_id: 1 },
  _previousDataValues: { post_id: 45, categories_id: 1 },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false,
  null: undefined
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '디지털기기1' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '디지털기기' LIMIT 1;
Executing (default): INSERT INTO `post` (`id`,`title`,`contents`,`price`,`image_src`,`user_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `post_has_categories` (`post_id`,`categories_id`) VALUES (?,?);
post_has_categories {
  dataValues: { post_id: 46, categories_id: 1 },
  _previousDataValues: { post_id: 46, categories_id: 1 },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false,
  null: undefined
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '9' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '6' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '6' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '6' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '5' LIMIT 1;
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '5' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1642862458
}
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`category` = '1' LIMIT 1;
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` WHERE `post`.`id` = 48 ORDER BY `post`.`createdAt` DESC LIMIT '10') AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` ORDER BY `post`.`createdAt` DESC;
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` WHERE `post`.`id` = 48 ORDER BY `post`.`createdAt` DESC LIMIT '1') AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` ORDER BY `post`.`createdAt` DESC;
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` WHERE `post`.`id` = 11 ORDER BY `post`.`createdAt` DESC LIMIT '10') AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` ORDER BY `post`.`createdAt` DESC;
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` WHERE `post`.`id` = 1 ORDER BY `post`.`createdAt` DESC LIMIT '0') AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` ORDER BY `post`.`createdAt` DESC;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642903371,
  exp: 1642906971
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642903442,
  exp: 1642907042
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'nick',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-22T09:42:22.000Z',
  iat: 1642903463,
  exp: 1642907063
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'nick',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-22T09:42:22.000Z',
  iat: 1642903513,
  exp: 1642907113
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'dmdrkdm7@gmail.com' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642911404,
  exp: 1642915004
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911616,
  exp: 1642915216
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
인증 요청 발생
userInfoFromAccessToken 는  null
userInfoFromRefreshToken 는 {
  id: 42,
  nickname: 'test1040',
  email: 'test1040',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-22T13:40:40.000Z',
  updatedAt: '2022-01-22T13:40:40.000Z',
  iat: 1642858858,
  exp: 1645450858
}
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'd' AND `user`.`password` = 'd' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1642915259
}
userInfoFromRefreshToken 는 {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642911659,
  exp: 1645503659
}
Executing (default): SELECT `id`, `category` FROM `categories` AS `categories` WHERE `categories`.`id` = '2';
Executing (default): INSERT INTO `post` (`id`,`title`,`contents`,`price`,`image_src`,`user_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `post_has_categories` (`post_id`,`categories_id`) VALUES (?,?);
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642912168,
  exp: 1642915768
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642912183,
  exp: 1642915783
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913303,
  exp: 1642916903
}
userInfoFromRefreshToken 는 null
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913623,
  exp: 1642917223
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913739,
  exp: 1642917339
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913739,
  exp: 1642917339
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913739,
  exp: 1642917339
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913739,
  exp: 1642917339
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913765,
  exp: 1642917365
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913822,
  exp: 1642917422
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913822,
  exp: 1642917422
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913822,
  exp: 1642917422
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913822,
  exp: 1642917422
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913883,
  exp: 1642917483
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913883,
  exp: 1642917483
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913940,
  exp: 1642917540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913940,
  exp: 1642917540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913940,
  exp: 1642917540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913940,
  exp: 1642917540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913952,
  exp: 1642917552
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913952,
  exp: 1642917552
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642913952,
  exp: 1642917552
}
userInfoFromRefreshToken 는 null
바디는 { email: 'test0159', password: 'test0159', user_id: 'test0159' }
Executing (ceb2e563-c8b8-4f6f-bc8c-543b884125ab): START TRANSACTION;
Executing (ceb2e563-c8b8-4f6f-bc8c-543b884125ab): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0159' LIMIT 1;
Executing (ceb2e563-c8b8-4f6f-bc8c-543b884125ab): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (ceb2e563-c8b8-4f6f-bc8c-543b884125ab): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0159' AND `user`.`password` = 'test0159' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1642917681
}
userInfoFromRefreshToken 는 {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1645506081
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 43 43
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDMsIm5pY2tuYW1lIjoidGVzdDAxNTkiLCJlbWFpbCI6InRlc3QwMTU5IiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwiaWF0IjoxNjQyOTE0MDgxLCJleHAiOjE2NDU1MDYwODF9.rYsXwAVIHUrwNNgaocRuEpKqeBMwQfxJKuhwm0b7e1k'
}
Executing (default): DELETE FROM `user` WHERE `id` = 43
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1642917681
}
userInfoFromRefreshToken 는 {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1645506081
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 43 43
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDMsIm5pY2tuYW1lIjoidGVzdDAxNTkiLCJlbWFpbCI6InRlc3QwMTU5IiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwiaWF0IjoxNjQyOTE0MDgxLCJleHAiOjE2NDU1MDYwODF9.rYsXwAVIHUrwNNgaocRuEpKqeBMwQfxJKuhwm0b7e1k'
}
Executing (default): DELETE FROM `user` WHERE `id` = 43
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914074,
  exp: 1642917674
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914441,
  exp: 1642918041
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914490,
  exp: 1642918090
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914490,
  exp: 1642918090
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914490,
  exp: 1642918090
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914490,
  exp: 1642918090
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914490,
  exp: 1642918090
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914883,
  exp: 1642918483
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914883,
  exp: 1642918483
}
userInfoFromRefreshToken 는 null
바디는 { user_id: 'test0214', email: 'test0214', password: 'test0214' }
Executing (ff8ad913-4726-46b5-9877-305fa8d7638a): START TRANSACTION;
Executing (ff8ad913-4726-46b5-9877-305fa8d7638a): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0214' LIMIT 1;
Executing (ff8ad913-4726-46b5-9877-305fa8d7638a): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (ff8ad913-4726-46b5-9877-305fa8d7638a): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0214' AND `user`.`password` = 'test0214' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 44,
  nickname: 'test0214',
  email: 'test0214',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:14:59.000Z',
  updatedAt: '2022-01-23T05:14:59.000Z',
  iat: 1642914913,
  exp: 1642918513
}
userInfoFromRefreshToken 는 {
  id: 44,
  nickname: 'test0214',
  email: 'test0214',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:14:59.000Z',
  updatedAt: '2022-01-23T05:14:59.000Z',
  iat: 1642914913,
  exp: 1645506913
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 44 44
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDQsIm5pY2tuYW1lIjoidGVzdDAyMTQiLCJlbWFpbCI6InRlc3QwMjE0IiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNToxNDo1OS4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNToxNDo1OS4wMDBaIiwiaWF0IjoxNjQyOTE0OTEzLCJleHAiOjE2NDU1MDY5MTN9.2QYa8EXPS3kygSSBdpiqxJnxCdbhDJgTN9iDbt0YWRs'
}
Executing (default): DELETE FROM `user` WHERE `id` = 44
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914940,
  exp: 1642918540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914940,
  exp: 1642918540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914940,
  exp: 1642918540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914940,
  exp: 1642918540
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642914940,
  exp: 1642918540
}
userInfoFromRefreshToken 는 null
바디는 { user_id: 'test0214', email: 'test0214', password: 'test0214' }
Executing (0d7cae04-cac8-454c-9532-835038a8aa85): START TRANSACTION;
Executing (0d7cae04-cac8-454c-9532-835038a8aa85): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0214' LIMIT 1;
Executing (0d7cae04-cac8-454c-9532-835038a8aa85): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (0d7cae04-cac8-454c-9532-835038a8aa85): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'test0214' AND `user`.`password` = 'test0214' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 45,
  nickname: 'test0214',
  email: 'test0214',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:16:30.000Z',
  updatedAt: '2022-01-23T05:16:30.000Z',
  iat: 1642914995,
  exp: 1642918595
}
userInfoFromRefreshToken 는 {
  id: 45,
  nickname: 'test0214',
  email: 'test0214',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:16:30.000Z',
  updatedAt: '2022-01-23T05:16:30.000Z',
  iat: 1642914995,
  exp: 1645506995
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 45 45
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDUsIm5pY2tuYW1lIjoidGVzdDAyMTQiLCJlbWFpbCI6InRlc3QwMjE0IiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNToxNjozMC4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNToxNjozMC4wMDBaIiwiaWF0IjoxNjQyOTE0OTk1LCJleHAiOjE2NDU1MDY5OTV9.O1SGv269i2lP0q08bStrWg9F3HEHZPohJ_GgfE3MeTI'
}
Executing (default): DELETE FROM `user` WHERE `id` = 45
1
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = 'client@t.com' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1642917681
}
userInfoFromRefreshToken 는 {
  id: 43,
  nickname: 'test0159',
  email: 'test0159',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:01:09.000Z',
  updatedAt: '2022-01-23T05:01:09.000Z',
  iat: 1642914081,
  exp: 1645506081
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 43 43
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDMsIm5pY2tuYW1lIjoidGVzdDAxNTkiLCJlbWFpbCI6InRlc3QwMTU5IiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTowMTowOS4wMDBaIiwiaWF0IjoxNjQyOTE0MDgxLCJleHAiOjE2NDU1MDYwODF9.rYsXwAVIHUrwNNgaocRuEpKqeBMwQfxJKuhwm0b7e1k'
}
Executing (default): DELETE FROM `user` WHERE `id` = 43
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
undefined 환경에서 서버가 443 번 포트에서 실행되었습니다.
바디는 {
  user_id: '5yT@p@zN=[xCFmm)',
  email: '5yT@p@zN=[xCFmm)',
  password: '5yT@p@zN=[xCFmm)'
}
Executing (4a5c34dd-f48b-47bc-9c51-3db1e8bd4fff): START TRANSACTION;
Executing (4a5c34dd-f48b-47bc-9c51-3db1e8bd4fff): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '5yT@p@zN=[xCFmm)' LIMIT 1;
Executing (4a5c34dd-f48b-47bc-9c51-3db1e8bd4fff): INSERT INTO `user` (`id`,`nickname`,`email`,`password`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
Executing (4a5c34dd-f48b-47bc-9c51-3db1e8bd4fff): COMMIT;
Executing (default): SELECT `id`, `nickname`, `email`, `mobile`, `password`, `address01`, `address02`, `role`, `createdAt`, `updatedAt` FROM `user` AS `user` WHERE `user`.`email` = '5yT@p@zN=[xCFmm)' AND `user`.`password` = '5yT@p@zN=[xCFmm)' LIMIT 1;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1642919562
}
userInfoFromRefreshToken 는 {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1645507962
}
{
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1642919562
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1642919562
}
userInfoFromRefreshToken 는 {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1645507962
}
{
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1642919562
}
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1642919562
}
userInfoFromRefreshToken 는 {
  id: 46,
  nickname: '5yT@p@zN=[xCFmm',
  email: '5yT@p@zN=[xCFmm)',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-23T05:32:40.000Z',
  updatedAt: '2022-01-23T05:32:40.000Z',
  iat: 1642915962,
  exp: 1645507962
}
회원 탈퇴 요청, 각 토큰에서 해석한 유저 email은 각각 다음과 같습니다. 46 46
쿠키는 {
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDYsIm5pY2tuYW1lIjoiNXlUQHBAek49W3hDRm1tIiwiZW1haWwiOiI1eVRAcEB6Tj1beENGbW0pIiwibW9iaWxlIjpudWxsLCJhZGRyZXNzMDEiOm51bGwsImFkZHJlc3MwMiI6bnVsbCwicm9sZSI6MCwiY3JlYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTozMjo0MC4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMi0wMS0yM1QwNTozMjo0MC4wMDBaIiwiaWF0IjoxNjQyOTE1OTYyLCJleHAiOjE2NDU1MDc5NjJ9.eFB4QtBJNRTYeSQSbRBEtOFn6zGYjAvqJFb2c-Z1kSk'
}
Executing (default): DELETE FROM `user` WHERE `id` = 46
1
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916146,
  exp: 1642919746
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916146,
  exp: 1642919746
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916146,
  exp: 1642919746
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916159,
  exp: 1642919759
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916159,
  exp: 1642919759
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916159,
  exp: 1642919759
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916159,
  exp: 1642919759
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916159,
  exp: 1642919759
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916304,
  exp: 1642919904
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916304,
  exp: 1642919904
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916304,
  exp: 1642919904
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642916326,
  exp: 1642919926
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 3,
  nickname: 'd',
  email: 'd',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-19T05:34:13.000Z',
  updatedAt: '2022-01-19T05:34:13.000Z',
  iat: 1642916326,
  exp: 1642919926
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category`, `user`.`id` AS `user.id`, `user`.`nickname` AS `user.nickname` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10) AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` LEFT OUTER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` ORDER BY `post`.`createdAt` DESC;
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category`, `user`.`id` AS `user.id`, `user`.`nickname` AS `user.nickname` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10) AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` LEFT OUTER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` ORDER BY `post`.`createdAt` DESC;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916796,
  exp: 1642920396
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916808,
  exp: 1642920408
}
userInfoFromRefreshToken 는 null
Executing (default): SELECT `post`.*, `post_has_categories`.`post_id` AS `post_has_categories.post_id`, `post_has_categories`.`categories_id` AS `post_has_categories.categories_id`, `post_has_categories->category`.`id` AS `post_has_categories.category.id`, `post_has_categories->category`.`category` AS `post_has_categories.category.category`, `user`.`id` AS `user.id`, `user`.`nickname` AS `user.nickname` FROM (SELECT `post`.`id`, `post`.`title`, `post`.`contents`, `post`.`price`, `post`.`image_src`, `post`.`user_id`, `post`.`createdAt`, `post`.`updatedAt` FROM `post` AS `post` ORDER BY `post`.`createdAt` DESC LIMIT 10) AS `post` LEFT OUTER JOIN `post_has_categories` AS `post_has_categories` ON `post`.`id` = `post_has_categories`.`post_id` LEFT OUTER JOIN `categories` AS `post_has_categories->category` ON `post_has_categories`.`categories_id` = `post_has_categories->category`.`id` LEFT OUTER JOIN `user` AS `user` ON `post`.`user_id` = `user`.`id` ORDER BY `post`.`createdAt` DESC;
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916808,
  exp: 1642920408
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916882,
  exp: 1642920482
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916882,
  exp: 1642920482
}
userInfoFromRefreshToken 는 null
인증 요청 발생
userInfoFromAccessToken 는  {
  id: 28,
  nickname: 'a',
  email: 'dt',
  mobile: null,
  address01: null,
  address02: null,
  role: 0,
  createdAt: '2022-01-20T07:30:53.000Z',
  updatedAt: '2022-01-23T02:46:23.000Z',
  iat: 1642916882,
  exp: 1642920482
}
userInfoFromRefreshToken 는 null
